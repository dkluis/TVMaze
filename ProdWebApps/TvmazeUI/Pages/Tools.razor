@namespace TvmazeUI.Pages
@inject DataExchange _dataExchangeService

@page "/tools"

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css">

@code
{
    string?       _message;
    int           _refreshShowId;
    string        _logView    = "";
    string        _currentLog = "";
    List<string>? _logContent;
    bool          _logRequested;
    List<Log>     _logTable = new();
    bool          _logTableRequested;
    int           _upToLevel  = 2;
    const string  NoRecsFound = "No Records Found";

    private void ExecScripts(string scriptRequested = "")
    {
        if (scriptRequested == "")
        {
            return;
        }

        switch (scriptRequested)
        {
            case "Followed":
                RunApp("UpdateFollowed");
                _message = "Finished Update Followed";

                break;

            case "Plex Acquired":
                RunApp("UpdatePlexAcquired");
                _message = "Finished Update Plex Acquired";

                break;

            case "Plex Watched":
                RunApp("UpdatePlexWatched");
                _message = "Finished Update Plex Watched";

                break;

            case "Acquire":
                RunApp("AcquireMedia");
                _message = "Finished Acquire Media";

                break;

            case "Show Epochs":
                RunApp("UpdateShowEpochs");
                _message = "Finished Update Show Epochs";

                break;

            case "Cleanup":
                RunApp("CleanupPlexMedia");
                _message = "Finished Cleanup Plex Media";

                break;

            case "Refresh Shows":
                RunApp("RefreshShows");
                _message = "Finished Refresh Shows";

                break;

            case "ShowRss Feed":
                RunApp("RefreshShowRssFeed");
                _message = "Finished Refresh ShowRss Feed";

                break;

            case "Refresh ShowRss":
                RunApp("CompareShowsWithShowRss");
                _message = "Finished Refresh ShowRss";

                break;

            default:
                _message = "";

                break;
        }
    }

    private void ExecLogViewer(string logRequested = "")
    {
        if (logRequested == "")
        {
            return;
        }

        string program;
        _logView      = logRequested + " Log";
        _logRequested = true;
        ClearLogTable();

        switch (logRequested)
        {
            case "Followed":
                program = "Update Followed";

                break;

            case "Plex Acquired":
                program = "Update Plex Acquired";

                break;

            case "Plex Watched":
                program = "Update Plex Watched";

                break;

            case "Acquire":
                program = "Acquire Media";

                break;

            case "Show Epochs":
                program = "Update Show Epochs";

                break;

            case "ShowRss Feed":
                program = "Refresh ShowRss Feed";

                break;

            case "Refresh One":
                program = "RefreshOneShow Web UI";

                break;

            case "Refresh Shows":
                program = "Refresh Shows";

                break;

            case "Cleanup Media":
                program = "Cleanup Plex Media";

                break;

            case "Web UI":
                program = "Web UI";

                break;

            case "Refresh ShowRss":
                program = "Refresh ShowRss";

                break;

            case "CronLog":
                program = "CronLog";

                break;

            case "TransmissionLog":
                program = "Transmission";

                break;

            default:
                _logView      = "";
                _logRequested = false;
                _currentLog   = "";

                return;
        }

        var appInfo = new AppInfo("TVMaze", program, "DbAlternate");
        var logFile = appInfo.TxtFile;
        _logContent = logFile.ReturnLogContent();
        _currentLog = program;
    }

    private void ClearLog()
    {
        _logView      = "";
        _logRequested = false;
    }

    private void EmptyLog()
    {
        if (_logView == "")
        {
            _logView = "No Active Log to Empty";

            return;
        }

        var appInfo = new AppInfo("TVMaze", _currentLog, "DbAlternate");
        appInfo.TxtFile.Empty();
        _currentLog   = "";
        _logRequested = false;
        _logView      = "";
    }

    private void RunScript(string scriptName)
    {
        using Process runScript = new();
        runScript.StartInfo.FileName               = scriptName;
        runScript.StartInfo.UseShellExecute        = true;
        runScript.StartInfo.RedirectStandardOutput = false;
        runScript.Start();
        runScript.WaitForExit();
    }

    private void RunApp(string appName)
    {
        var basePath = "/media/psf/TVMazeLinux/Apps/";

        var processInfo = new ProcessStartInfo
                          {
                              FileName               = $"{basePath}{appName}/{appName}",
                              Arguments              = "",
                              UseShellExecute        = false,
                              WorkingDirectory       = basePath + appName,
                              RedirectStandardError  = true,
                              RedirectStandardOutput = true,
                          };
        var process = new Process {StartInfo = processInfo};

        process.ErrorDataReceived += (sender, data) =>
        {
            if (data.Data != null) File.AppendAllText($"/media/psf/TVMazeLinux/Logs/{appName}.log", data.Data + "\n");
        };

        process.OutputDataReceived += (sender, data) =>
        {
            if (data.Data != null) File.AppendAllText($"/media/psf/TVMazeLinux/Logs/{appName}.log", data.Data + "\n");
        };

        process.Start();
        process.BeginOutputReadLine();
        process.BeginErrorReadLine();

        //process.WaitForExit();
    }

    private void RefreshOneShow()
    {
        if (_refreshShowId == 0)
        {
            _message = "Enter a ShowId: 0 is not Valid";

            return;
        }

        _message = $"Trying to update {_refreshShowId}";

        AppInfo appInfo = new("Tvmaze", "Web UI", "DbAlternate");

        using (MariaDb mDbR = new(appInfo))
        {
            var rdr = mDbR.ExecQuery($"select `TvmShowId`, `ShowName` from Shows where `TvmShowId` = {_refreshShowId} order by `TvmShowId` desc");

            while (rdr.Read())
            {
                using ShowAndEpisodes sae = new(appInfo);
                _message = $"Working on Show {rdr[0]} {rdr[1]}";
                LogModel.Record("Web UI", "Refresh One Show", _message, 1);
                sae.Refresh(int.Parse(rdr[0].ToString()!));
            }

            _message = _message.Contains("Trying") ? $"ShowId {_refreshShowId} is not in the Shows Table" : _message.Replace("Working on", "Refreshed");
        }
    }

    private void RestartPlex()
    {
        try
        {
            using var client     = new HttpClient();
            var       pingResult = client.GetAsync("http://ca-server.local:6002/api/ping").Result;

            if (!pingResult.IsSuccessStatusCode)
            {
                _message = $"No ping received from CA-Server {pingResult.ReasonPhrase}";
            } else
            {
                var response = client.GetAsync("http://ca-server.local:6002/api/RestartPlex").Result;

                if (response.IsSuccessStatusCode)
                {
                    _message = "Plex restart successfully initiated.";
                } else
                {
                    _message = $"Failed to start Plex restart. Received status code: {response.StatusCode}";
                }
            }
        }
        catch (Exception e)
        {
            _message = $"Error Occurred: {e.Message}";
            LogModel.Record("Web UI", "Other - Restart Plex", $"Error Occurred: {e.Message} ::: {e.InnerException}", 20);
        }
    }

    private List<Log> GetLogInfo(string program, int fromLevel, int toLevel, bool allData = true)
    {
        try
        {
            using var db = new TvMaze();

            if (allData)
            {
                if (program == "CronLog")
                {
                    return db.Logs.Where(l => (l.Program == program && l.Level >= fromLevel && l.Level <= toLevel && !l.Message.Contains("Stopped")) || (l.Level == 20)).ToList().OrderByDescending(l => l.RecordedDate).ToList();
                }

                return db.Logs.Where(l => (l.Program == program && l.Level >= fromLevel && l.Level <= toLevel && !l.Message.Contains("Stopped")) || (l.Level == 20 && l.Program == program)).ToList().OrderByDescending(l => l.RecordedDate).ToList();
            } else
            {
                if (program == "CronLog")
                {
                    return db.Logs.Where(l => (l.Program == program && l.Level >= fromLevel && l.Level <= toLevel && l.RecordedDate > DateTime.Now.Date && !l.Message.Contains("Stopped")) || (l.Level == 20)).OrderByDescending(l => l.RecordedDate).ToList();
                } else
                {
                    return db.Logs.Where(l => (l.Program == program && l.Level >= fromLevel && l.Level <= toLevel && l.RecordedDate > DateTime.Now.Date && !l.Message.Contains("Stopped")) || (l.Level == 20 && l.Program == program)).OrderByDescending(l => l.RecordedDate).ToList();
                }
            }
        }
        catch (Exception e)
        {
            LogModel.Record("Web UI", "Logs", $"Error Occurred retrieving log records {e.Message} ::: {e.InnerException}", 20);

            return new List<Log>();
        }
    }

    private void ShowCronlogTable()
    {
        _logTable          = GetLogInfo("CronLog", 0, 0, true);
        _logTableRequested = true;
        ClearLog();
    }

    private void ShowNamedTable(string logName)
    {
        _logTable          = GetLogInfo(logName, 0, _upToLevel, true);
        _logTableRequested = true;
        ClearLog();
    }

    private void ClearLogTable()
    {
        _logTable          = new List<Log>();
        _logTableRequested = false;
    }

}

@{ _dataExchangeService.LastPage = "Tools"; }
<h1>Tools Page</h1>
<div>
    <h2>Execute Processes: </h2>
    <div class="row">
        <div class="col-md-12 mb-2">
            <button class="btn btn-primary" @onclick='() => ExecScripts("Followed")'><i class="bi bi-database-down"></i>&nbsp;Followed</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Plex Acquired")'><i class="bi bi-database-down"></i>&nbsp;Acquired</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Plex Watched")'><i class="bi bi-database-down"></i>&nbsp;Watched</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Acquire")'><i class="bi bi-database-down"></i>&nbsp;Acquire</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Show Epochs")'><i class="bi bi-database-down"></i>&nbsp;Epochs</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Cleanup")'><i class="bi bi-database-down"></i>&nbsp;Cleanup</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Refresh Shows")'><i class="bi bi-arrow-clockwise"></i>&nbsp;Shows</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("ShowRss Feed")'><i class="bi bi-arrow-clockwise"></i>&nbsp;Feed</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Refresh ShowRss")'
                    data-toggle="tooltip" data-placement="bottom" title="Update ShowRss HTML first">
                <i class="bi bi-arrow-clockwise"></i>&nbsp;ShowRss
            </button>
        </div>
        <div class="row">
            <div class="col-md-12 mb-2">
                <input class="col-sm-1 m-1" style="width: 50px"@bind="@_refreshShowId"/>
                <button class="btn btn-primary" @onclick="RefreshOneShow"><i class="bi bi-database-down"></i>&nbsp;One Show</button>
                <button class="btn btn-warning" @onclick="RestartPlex"><i class="bi bi-sign-stop"></i>&nbsp;Restart Plex&nbsp;<i class="bi bi-skip-start"></i></button>
            </div>
        </div>
    </div>
</div>
<p></p>
<div>
    <h4>Update Status:</h4>
    <div>
        <h5>
            <em>@_message</em>
        </h5>
    </div>
</div>
<p></p>
<p></p>
<hr class="bg-primary"/>
<p></p>
<p></p>
<div>
    <h2>View the Logs</h2>
    <div class="row">
        <div class="col-md-12 mb-2">
            <input class="col-sm-1 m-1" style="width: 50px"@bind="@_upToLevel"/>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Update Followed")'><i class="bi bi-binoculars"></i>&nbsp;Followed</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Update Plex Acquired")'><i class="bi bi-binoculars"></i>&nbsp;Acquired</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Update Plex Watched")'><i class="bi bi-binoculars"></i>&nbsp;Watched</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Acquire Media")'><i class="bi bi-binoculars"></i>&nbsp;Acquire</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Update Show Epochs")'><i class="bi bi-binoculars"></i>&nbsp;Epochs</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Cleanup Plex Media")'><i class="bi bi-binoculars"></i>&nbsp;Cleanup</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Refresh Shows")'><i class="bi bi-binoculars"></i>&nbsp;Shows</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Refresh ShowRss Feed")'><i class="bi bi-binoculars"></i>&nbsp;Feed</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Compare ShowRss")'><i class="bi bi-binoculars"></i>&nbsp;ShowRss</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Refresh One")'><i class="bi bi-binoculars"></i>&nbsp;One Show</button>
            <button class="btn btn-info" @onclick='() => ShowNamedTable("Web UI")'><i class="bi bi-binoculars"></i>&nbsp;Web UI</button>
            <button class="btn btn-info" @onclick='() => ShowCronlogTable()'><i class="bi bi-binoculars"></i>&nbsp;Cronlog</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("TransmissionLog")'><i class="bi bi-binoculars"></i>&nbsp;TransmissonLog</button>
        </div>
        <div class="row">
            <div class="col-md-12 mb-2">
                <button class="btn btn-primary" @onclick="ClearLog"><i class="bi bi-box-arrow-left"></i>&nbsp;Clear</button>
                @if (_logView == "No Active Log to Empty")
                {
                    _logView = "";
                }
                <button class="btn btn-warning" @onclick="EmptyLog"><i class="bi bi-trash"></i>&nbsp;Empty</button>
            </div>
        </div>
    </div>
</div>

<div>
    <h4>@_logView</h4>
    <p></p>
    <p>
        @if (_logRequested)
        {
            if (_logContent!.Count > 0)
                foreach (var line in _logContent!)
                {
                    if (line.Contains("########################################################################################") || line.Contains("Finished ####") || line.ToLower().Contains("chromedriver") || line.ToLower().Contains("connection") || line.ToLower().Contains("bind() failed"))
                    {
                        continue;
                    }

                    @line<br/>
                }
            else
            {
                @NoRecsFound
                ;
            }
        }
    </p>
    @if (_logTableRequested)
    {
        <div>
            <p></p>
            <h6>Logging - Table</h6>
            <p></p>
            <table class="table table-striped" style="font-size: 85%; line-height: 85%">
                <thead>
                <tr>
                    <th>DateTime</th>
                    <th>Program</th>
                    <th>Function</th>
                    <th>Details</th>
                    <th>Level</th>
                </tr>
                </thead>
                <tbody>
                @{
                    if (_logTable != null && _logTable.Count > 0)
                    {
                        foreach (var rec in _logTable)
                        {
                            <tr>
                                <td style="width: 250px; color: @(rec.Level == 20 ? "red" : "black");">@rec.RecordedDate.ToString("hh:mm:ss.fff tt")</td>
                                <td style="width: 250px; color: @(rec.Level == 20 ? "red" : "black");">@rec.Program</td>
                                <td style="width: 250px; color: @(rec.Level == 20 ? "red" : "black");">@rec.Function</td>
                                <td style="width: 500px; color: @(rec.Level == 20 ? "red" : "black");">@rec.Message</td>
                                <td style="width: 50px; color: @(rec.Level == 20 ? "red" : "black");">@rec.Level</td>
                            </tr>
                        }
                    } else
                    {
                        <tr>
                            <td>@NoRecsFound</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    }
</div>