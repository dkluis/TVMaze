@namespace TvmazeUI.Pages
@inject DataExchange _dataExchangeService

@page "/tools"

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css">

@code
{
    string?       _message;
    int           _refreshShowId;
    string        _logView    = "";
    string        _currentLog = "";
    List<string>? _logContent;
    bool          _logRequested;
    private void ExecScripts(string scriptRequested = "")
    {
        if (scriptRequested == "")
        {
            return;
        }

        switch (scriptRequested)
        {
            case "Followed":
                RunApp("UpdateFollowed");
                _message = "Finished Update Followed";
                break;
            case "Plex Acquired":
                RunApp("UpdatePlexAcquired");
                _message = "Finished Update Plex Acquired";
                break;
            case "Plex Watched":
                RunScript("/Users/dick/TVMaze/Scripts/UpdatePlexWatched.sh");
                _message = "Finished Update Plex Watched";
                break;
            case "Acquire":
                RunScript("/Users/dick/TVMaze/Scripts/AcquireMedia.sh");
                _message = "Finished Acquire Media";
                break;
            case "Show Epochs":
                RunScript("/Users/dick/TVMaze/Scripts/UpdateShowEpochs.sh");
                _message = "Finished Update Show Epochs";
                break;
            case "Cleanup":
                RunScript("/Users/dick/TVMaze/Scripts/CleanupPlexMedia.sh");
                _message = "Finished Cleanup Plex Media";
                break;
            case "Refresh Shows":
                RunScript("/Users/dick/TVMaze/Scripts/RefreshShows.sh");
                _message = "Finished Refresh Shows";
                break;
            case "ShowRss Feed":
                RunScript("/Users/dick/TVMaze/Scripts/RefreshShowRssFeed.sh");
                _message = "Finished Refresh ShowRss Feed";
                break;
            case "Refresh ShowRss":
                RunScript("/Users/dick/TVMaze/Scripts/RefreshShowRss.sh");
                _message = "Finished Refresh ShowRss";
                break;
            case "Restart Plex":
                ResetPlexMediaServer();
                break;
            default:
                _message = "";
                break;
        }
    }
    private void ExecLogViewer(string logRequested = "")
    {
        if (logRequested == "")
        {
            return;
        }

        string program;
        _logView      = logRequested + " Log";
        _logRequested = true;
        switch (logRequested)
        {
            case "Followed":
                program = "Update Followed";
                break;
            case "Plex Acquired":
                program = "Update Plex Acquired";
                break;
            case "Plex Watched":
                program = "Update Plex Watched";
                break;
            case "Acquire":
                program = "Acquire Media";
                break;
            case "Show Epochs":
                program = "Update Show Epochs";
                break;
            case "ShowRss Feed":
                program = "Refresh ShowRss Feed";
                break;
            case "Refresh One":
                program = "RefreshOneShow WebUI";
                break;
            case "Refresh Shows":
                program = "Refresh Shows";
                break;
            case "Cleanup Media":
                program = "Cleanup Plex Media";
                break;
            case "WebUI":
                program = "WebUI";
                break;
            case "Refresh ShowRss":
                program = "Refresh ShowRss";
                break;
            case "CronLog":
                program = "CronLog";
                break;
            case "TransmissionLog":
                program = "Transmission";
                break;
            default:
                _logView      = "";
                _logRequested = false;
                _currentLog   = "";
                return;
        }

        var appInfo = new AppInfo("TVMaze", program, "DbAlternate");
        var logFile = appInfo.TxtFile;
        _logContent = logFile.ReturnLogContent();
        _currentLog = program;
    }
    private void ClearLog()
    {
        _logView      = "";
        _logRequested = false;
    }
    private void EmptyLog()
    {
        if (_logView == "")
        {
            _logView = "No Active Log to Empty";
            return;
        }

        var appInfo = new AppInfo("TVMaze", _currentLog, "DbAlternate");
        appInfo.TxtFile.Empty();
        _currentLog   = "";
        _logRequested = false;
        _logView      = "";
    }
    private void RunScript(string scriptName)
    {
        using Process runScript = new();
        runScript.StartInfo.FileName               = scriptName;
        runScript.StartInfo.UseShellExecute        = true;
        runScript.StartInfo.RedirectStandardOutput = false;
        runScript.Start();
        runScript.WaitForExit();
    }

    private void RunApp(string appName)
    {
        var basePath = "/media/psf/TVMazeLinux/Apps/";
        var processInfo = new ProcessStartInfo
                      {
                            FileName = $"{basePath}{appName}/{appName}",
                            Arguments = "",
                            UseShellExecute = false,
                            WorkingDirectory = basePath + appName,
                            RedirectStandardError = true,
                            RedirectStandardOutput = false,
                      };
        var process = new Process {StartInfo = processInfo};

        process.ErrorDataReceived += (sender, data) =>
        {
            if (data.Data != null) File.AppendAllText($"media/psf/TVMazeLinux/Apps/Logs/{appName}.log", data.Data + "\n");
        };

        process.Start();
        process.BeginErrorReadLine();
        //process.WaitForExit();

    }
    private void RefreshOneShow()
    {
        if (_refreshShowId == 0)
        {
            _message = "Enter a ShowId: 0 is not Valid";
            return;
        }

        _message = $"Trying to update {_refreshShowId}";

        AppInfo appInfo = new("TVMaze", "RefreshOneShow WebUI", "DbAlternate");
        var     log     = appInfo.TxtFile;
        log.Start();
        using (MariaDb mDbR = new(appInfo))
        {
            var rdr = mDbR.ExecQuery($"select `TvmShowId`, `ShowName` from Shows where `TvmShowId` = {_refreshShowId} order by `TvmShowId` desc");

            while (rdr.Read())
            {
                using ShowAndEpisodes sae = new(appInfo);
                _message = $"Working on Show {rdr[0]} {rdr[1]}";
                log.Write($"{_message}", "", 2);
                sae.Refresh(int.Parse(rdr[0].ToString()!));
            }

            _message = _message.Contains("Trying") ? $"ShowId {_refreshShowId} is not in the Shows Table" : _message.Replace("Working on", "Refreshed");
        }

        log.Stop();
    }
    private void ResetPlexMediaServer()
    {
        _message = "Restarting Plex Media Server";

        AppInfo appInfo = new("TVMaze", "WebUI", "DbAlternate");
        var     log     = appInfo.TxtFile;
        log.Start();

        var process = Process.GetProcessesByName("Plex Media Serv");

        if (process.Length == 1)
        {
            log.Write("Killing Plex Media Server Process", "", 2);
            process[0].Kill();
            Thread.Sleep(5000);
            log.Write("Restarting Plex Media Server Process", "", 2);
            RunScript("/Users/dick/TVMaze/Scripts/RestartPlexMediaServer.sh");
            _message = "Plex Media Server Restarted";
        } else
        {
            log.Write("Did not find Plex Media Server Running, trying to start it now.");
            _message = "Plex Media Server Not Restarted";
            Thread.Sleep(5000);
            log.Write("Starting Plex Media Server Process", "", 2);
            RunScript("/Users/dick/TVMaze/Scripts/RestartPlexMediaServer.sh");
            _message = "Plex Media Server Restarted";
        }

        log.Stop();
    }
}

@{ _dataExchangeService.LastPage = "Tools"; }
<h1>Tools Page</h1>
<div>
    <h2>Execute Processes: </h2>
    <div class="row">
        <div class="col-md-12 mb-2">
            <button class="btn btn-primary" @onclick='() => ExecScripts("Followed")'><i class="bi bi-database-down"></i>&nbsp;Followed</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Plex Acquired")'><i class="bi bi-database-down"></i>&nbsp;Acquired</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Plex Watched")'><i class="bi bi-database-down"></i>&nbsp;Watched</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Acquire")'><i class="bi bi-database-down"></i>&nbsp;Acquire</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Show Epochs")'><i class="bi bi-database-down"></i>&nbsp;Epochs</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Cleanup")'><i class="bi bi-database-down"></i>&nbsp;Cleanup</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Refresh Shows")'><i class="bi bi-arrow-clockwise"></i>&nbsp;Shows</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("ShowRss Feed")'><i class="bi bi-arrow-clockwise"></i>&nbsp;Feed</button>
            <button class="btn btn-primary" @onclick='() => ExecScripts("Refresh ShowRss")'
                    data-toggle="tooltip" data-placement="bottom" title="Update ShowRss HTML first">
                <i class="bi bi-arrow-clockwise"></i>&nbsp;ShowRss
            </button>
        </div>
        <div class="row">
            <div class="col-md-12 mb-2">
                <input class="col-sm-1 m-1" @bind="@_refreshShowId"/>
                <button class="btn btn-primary" @onclick="RefreshOneShow"><i class="bi bi-database-down"></i>&nbsp;One Show</button>
                <button class="btn btn-warning" @onclick='() => ExecScripts("Restart Plex")'><i class="bi bi-sign-stop"></i>&nbsp;Restart Plex&nbsp;<i class="bi bi-skip-start"></i></button>
            </div>
        </div>
    </div>
</div>
<p></p>
<div>
    <h4>Update Status:</h4>
    <div>
        <h5>
            <em>@_message</em>
        </h5>
    </div>
</div>
<p></p>
<p></p>
<hr class="bg-primary"/>
<p></p>
<p></p>
<div>
    <h2>View the Logs</h2>
    <div class="row">
        <div class="col-md-12 mb-2">
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Followed")'><i class="bi bi-binoculars"></i>&nbsp;Followed</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Plex Acquired")'><i class="bi bi-binoculars"></i>&nbsp;Acquired</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Plex Watched")'><i class="bi bi-binoculars"></i>&nbsp;Watched</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Acquire")'><i class="bi bi-binoculars"></i>&nbsp;Acquire</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Show Epochs")'><i class="bi bi-binoculars"></i>&nbsp;Epochs</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Cleanup Media")'><i class="bi bi-binoculars"></i>&nbsp;Cleanup</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Refresh Shows")'><i class="bi bi-binoculars"></i>&nbsp;Shows</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("ShowRss Feed")'><i class="bi bi-binoculars"></i>&nbsp;Feed</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Refresh ShowRss")'><i class="bi bi-binoculars"></i>&nbsp;ShowRss</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("Refresh One")'><i class="bi bi-binoculars"></i>&nbsp;One Show</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("WebUI")'><i class="bi bi-binoculars"></i>&nbsp;Web UI</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("CronLog")'><i class="bi bi-binoculars"></i>&nbsp;Cronlog</button>
            <button class="btn btn-info" @onclick='() => ExecLogViewer("TransmissionLog")'><i class="bi bi-binoculars"></i>&nbsp;TransmissonLog</button>
        </div>
        <div class="row">
            <div class="col-md-12 mb-2">
                <button class="btn btn-primary" @onclick="ClearLog"><i class="bi bi-box-arrow-left"></i>&nbsp;Clear</button>
                @if (_logView == "No Active Log to Empty")
                {
                    _logView = "";
                }
                <button class="btn btn-warning" @onclick="EmptyLog"><i class="bi bi-trash"></i>&nbsp;Empty</button>
            </div>
        </div>
    </div>
</div>

<div>
    <h4>@_logView</h4>
    <p></p>
    <p>
        @if (_logRequested)
        {
            @foreach (var line in _logContent!)
            {
                if (line.Contains(
                                  "########################################################################################") ||
                    line.Contains("Finished ####")                                                                            ||
                    line.ToLower().Contains("chromedriver")                                                                   ||
                    line.ToLower().Contains("connection"))
                {
                    continue;
                }

                @line<br/>
            }
        }
    </p>
    <p></p>
    <em>End of Log @_logView</em>
</div>
