@page "/tools"

@code
{
    string _message;
    int _refreshShowId;
    string _logView = "";
    List<string> _logContent;
    bool _logRequested;

    private void ExecUpdateFollowed()
    {
        _message = "Running Update Followed";
        RunScript("/Users/dick/TVMaze/Scripts/UpdateFollowed.sh");
        _message = "Finished Update Followed";
    }

    private void ExecUpdatePlexAcquired()
    {
        _message = "Running Update Plex Acquired";
        RunScript("/Users/dick/TVMaze/Scripts/UpdatePlexAcquired.sh");
        _message = "Finished Update Plex Acquired";
    }

    private void ExecUpdatePlexWatched()
    {
        _message = "Running Update Plex Watched";
        RunScript("/Users/dick/TVMaze/Scripts/UpdatePlexWatched.sh");
        _message = "Finished Update Plex Watched";
    }

    private void ExecAcquireMedia()
    {
        _message = "Running Acquire Media";
        RunScript("/Users/dick/TVMaze/Scripts/AcquireMedia.sh");
        _message = "Finished Acquire Media";
    }

    private void ExecAcquireMediaLog()
    {
        _logView = "Acquire Media Log";
        _logRequested = true;
        var appInfo = new AppInfo("TVMaze", "Acquire Media", "DbAlternate");
        var logFile = appInfo.TxtFile;
        _logContent = logFile.ReturnLogContent();
    }

    private void ExecFollowedLog()
    {
        _logView = "Followed Log";
        _logRequested = true;
        var appInfo = new AppInfo("TVMaze", "Update Followed", "DbAlternate");
        var logFile = appInfo.TxtFile;
        _logContent = logFile.ReturnLogContent();
    }

    private void ExecPlexAcquiredLog()
    {
        _logView = "Plex Acquired Log";
        _logRequested = true;
        var appInfo = new AppInfo("TVMaze", "Update Plex Acquired", "DbAlternate");
        var logFile = appInfo.TxtFile;
        _logContent = logFile.ReturnLogContent();
    }

    private void ExecPlexWatchedLog()
    {
        _logView = "Plex Watched Log";
        _logRequested = true;
        var appInfo = new AppInfo("TVMaze", "Update Plex Watched", "DbAlternate");
        var logFile = appInfo.TxtFile;
        _logContent = logFile.ReturnLogContent();
    }

    private void ClearLog()
    {
        _logView = "";
        _logRequested = false;
    }


    private void RunScript(string scriptName)
    {
        using Process runScript = new();
        runScript.StartInfo.FileName = scriptName;
        runScript.StartInfo.UseShellExecute = true;
        runScript.StartInfo.RedirectStandardOutput = false;
        runScript.Start();
        runScript.WaitForExit();
    }

    private void RefreshOneShow()
    {
        if (_refreshShowId == 0)
        {
            _message = "Enter a ShowId: 0 is not Valid";
            return;
        }
        _message = $"Trying to update {_refreshShowId}";

        AppInfo appInfo = new("TVMaze", "RefreshOneShow WebUI", "DbAlternate");
        var log = appInfo.TxtFile;
        log.Start();
        using (MariaDb mDbR = new(appInfo))
        {
            var rdr = mDbR.ExecQuery($"select `TvmShowId`, `ShowName` from Shows where `TvmShowId` = {_refreshShowId} order by `TvmShowId` desc");

            while (rdr.Read())
            {
                using ShowAndEpisodes sae = new(appInfo);
                _message = $"Working on Show {rdr[0]} {rdr[1]}";
                log.Write($"{_message}", "", 2);
                sae.Refresh(int.Parse(rdr[0].ToString()!));
            }
            _message = _message.Contains("Trying") ? $"ShowId {_refreshShowId} is not in the Shows Table" : _message.Replace("Working on", "Refreshed");
        }
        log.Stop();
    }

}

<h1>Tools Page</h1>
<div>
    <h2>Batch Update Processes: </h2>
    <p></p>
    <button class="btn btn-primary" @onclick="ExecUpdateFollowed">Followed</button>
    &#8195;<button class="btn btn-primary" @onclick="ExecUpdatePlexAcquired">Plex Acquired</button>
    &#8195;<button class="btn btn-primary" @onclick="ExecUpdatePlexWatched">Plex Watched</button>
    &#8195;<button class="btn btn-primary" @onclick="ExecAcquireMedia">Acquire</button>
    <p></p>
</div>

<div>
    <h2>Direct Update Processes:</h2>
    <p></p>
    <input @bind="@_refreshShowId" size="5"/>
    &#8195;<button class="btn btn-primary" @onclick="RefreshOneShow">Refresh Show</button>
    <p></p>
</div>

<div>
    <h2>Status:</h2>
    <div>
        <h4>
            <em>@_message</em>
        </h4>
    </div>
</div>

<div>
    <h2>Logs</h2>
    <p></p>
    <button class="btn btn-primary" @onclick="ExecFollowedLog">Followed</button>
    &#8195;<button class="btn btn-primary" @onclick="ExecPlexAcquiredLog">Plex Acquired</button>
    &#8195;<button class="btn btn-primary" @onclick="ExecPlexWatchedLog">Plex Watched</button>
    &#8195;<button class="btn btn-primary" @onclick="ExecAcquireMediaLog">Acquire</button>
    &#8195;<button class="btn btn-primary" @onclick="ClearLog">Clear</button>
    <p></p>
</div>

<div>
    <h4>@_logView</h4>
    <p></p>
    <p>
    @if (_logRequested)
    {
        @foreach (var line in _logContent)
        {
            if (line.Contains(
                "########################################################################################") || 
                line.Contains("Finished ####")) { continue; }
            @line<br/>
        }
    }
    </p>
    <p></p>
    <em>End of Log @_logView</em>
</div>